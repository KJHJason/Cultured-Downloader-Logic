package cdlogic

import (
	"fmt"
	"net/http"
	"os"
	"path/filepath"

	"github.com/KJHJason/Cultured-Downloader-Logic/errors"
	"github.com/KJHJason/Cultured-Downloader-Logic/parsers"
)

// parse the Netscape cookie file generated by extensions like Get cookies.txt LOCALLY
func ParseNetscapeCookieFile(filePath, sessionId, website string) ([]*http.Cookie, error) {
	if filePath != "" && sessionId != "" {
		return nil, fmt.Errorf(
			"error %d: cannot use both cookie file and session id flags",
			errs.INPUT_ERROR,
		)
	}

	sessionCookieInfo := parsers.GetSessionCookieInfo(website)
	sessionCookieName := sessionCookieInfo.Name
	sessionCookieSameSite := sessionCookieInfo.SameSite

	f, err := os.Open(filePath)
	if err != nil {
		return nil, fmt.Errorf(
			"error %d: opening cookie file at %s, more info => %v",
			errs.OS_ERROR,
			filePath,
			err,
		)
	}
	defer f.Close()

	var cookies []*http.Cookie
	cookieArgs := parsers.NewCookieInfoArgs(sessionCookieName, sessionCookieSameSite)
	if ext := filepath.Ext(filePath); ext == ".txt" {
		cookies, err = parsers.ParseTxtCookieFile(f, filePath, cookieArgs)
	} else if ext == ".json" {
		cookies, err = parsers.ParseJsonCookieFile(f, filePath, cookieArgs)
	} else {
		err = fmt.Errorf(
			"error %d: invalid cookie file extension, %q, at %s...\nOnly .txt and .json files are supported",
			errs.INPUT_ERROR,
			ext,
			filePath,
		)
	}

	if err != nil {
		return nil, err
	}

	if len(cookies) == 0 {
		return nil, fmt.Errorf(
			"error %d: no session cookie found in cookie file at %s for website %q",
			errs.INPUT_ERROR,
			filePath,
			website,
		)
	}
	return cookies, nil
}
